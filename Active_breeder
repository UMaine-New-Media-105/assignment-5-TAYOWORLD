let bubbles = [];
let stars = [];

function setup() {
  createCanvas(960, 540);

  for (let i = 0; i < 50; i++) {
    let x = random(width);
    let y = random(height);
    let r = 20;
    bubbles[i] = new Bubble(x, y, r);
    
    
  
  }
  
   for (let i = 0; i < 15; i++) {
    stars.push(new Star(random(0, width / 4), random(0, height - 50), 5));
  }
  
}

function draw() {
  background(93, 125, 195);

  for (let i = 0; i < bubbles.length; i++) {
    bubbles[i].move();
    bubbles[i].show();
    bubbles[i].borderEdges();
  }
  
   for (let i = 0; i < stars.length; i++) {
    stars[i].update(stars);
    stars[i].display();
  }
  
}

class Bubble {
  constructor(x, y, r) {
    this.x = x;
    this.y = y;
    this.r = r;
  }

  move() {
    this.x += random(-5, 5);
    this.y += random(-5, 5);
  }

  show() {
    push();
    fill((140, 142, 154));
    stroke(1);
    strokeWeight(2);
    ellipse(this.x, this.y, this.r * 2);
    pop();
  }

   borderEdges() {
    if (this.x < this.r) {
      this.x = this.r;
    } else if (this.x > width - this.r) {
      this.x = width - this.r;
    }

    if (this.y < this.r) {
      this.y = this.r;
    } else if (this.y > height - this.r) {
      this.y = height - this.r;
    }
  }
}


class Star {
  constructor(x, y, speed) {
    this.x = x;
    this.y = y;
    this.speed = speed;
    this.direction = 1;
    this.size = 50;
    this.numPoints = 5;
  }

  update(stars) {
    this.x += this.speed * this.direction;

    //collision
    for (let i = 0; i < stars.length; i++) {
      if (this !== stars[i] && this.collidesWith(stars[i])) {
        this.direction = -this.direction;
        this.x = random(0, width / 4);
        this.y = random(0, height - this.size);
        break;
      }
    }

    // Bounce off walls
    if (this.x < 0 || this.x > width - this.size) {
      this.direction = -this.direction;
    }
  }

  collidesWith(otherStar) {
    let dx = this.x - otherStar.x;
    let dy = this.y - otherStar.y;
    let distance = sqrt(dx * dx + dy * dy);
    let minDistance = this.size / 2 + otherStar.size / 2;
    return distance < minDistance;
  }

  display () {
    push();
    translate(this.x + this.size / 2, this.y + this.size / 2);
    rotate(frameCount / 50);
    fill(255, 255, 0);
    noStroke();
    let angle = TWO_PI / this.numPoints;
    beginShape();
    for (let i = 0; i < TWO_PI; i += angle) {
      let x = cos(i) * this.size / 2;
      let y = sin(i) * this.size / 2;
      vertex(x, y);
      x = cos(i + angle / 2) * this.size / 4;
      y = sin(i + angle / 2) * this.size / 4;
      vertex(x, y);
    }
    endShape(CLOSE);
    pop();
  }
}
